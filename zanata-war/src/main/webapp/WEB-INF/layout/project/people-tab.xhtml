<!--
  Copyright 2015, Red Hat, Inc. and individual contributors
  as indicated by the @author tags. See the copyright.txt file in the
  distribution for a full listing of individual contributors.

  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.

  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
  -->
<!DOCTYPE composition PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<ui:composition xmlns="http://www.w3.org/1999/xhtml"
        xmlns:s="http://jboss.org/schema/seam/taglib"
        xmlns:ui="http://java.sun.com/jsf/facelets"
        xmlns:h="http://java.sun.com/jsf/html"
        xmlns:zanata="http://java.sun.com/jsf/composite/zanata"
        xmlns:f="http://java.sun.com/jsf/core"
        xmlns:a4j="http://richfaces.org/a4j"
        xmlns:rich="http://richfaces.org/rich">

  <div class="panel l--push-top-1">
    <div class="panel__header">
      <div class="panel__header__actions">
        <s:fragment rendered="#{s:hasPermission(projectHome.instance, 'manage-members')
            or s:hasPermission(projectHome.instance, 'manage-translation-members')}">
          <button class="button button--primary panel__header__button"
              data-toggle="modal"
              data-target="#modal-add-someone">
            <i class="i i--plus"></i> #{msgs['jsf.people.AddSomeone']}
          </button>
        </s:fragment>
        <div class="dropdown dropdown--header dropdown--small dropdown--right dropdown--inline js-dropdown">
          <a class="dropdown__toggle js-dropdown__toggle" href="#">#{msgs['jsf.Sort']}</a>
          <ul class="dropdown__content js-dropdown__content" role="content"
              aria-labelledby="dropdownContent">
            <li>
              <a class="is-active" tabindex="-1" href="#">
                #{msgs['jsf.people.SortByName']}
              </a>
            </li>
            <li>
              <a tabindex="-1" href="#">
                #{msgs['jsf.people.SortByRole']}
              </a>
            </li>
          </ul>
        </div>

        <!-- TODO this needs a bunch of params to customize it -->
        <ui:decorate template="person-permissions-modal.xhtml">
          <ui:param name="id" value="modal-add-someone"/>
          <ui:param name="title" value="#{msgs['jsf.people.AddSomeone']}"/>

          <!-- TODO use different field for this -->
          <ui:param name="memberships" value="#{projectHome.permissionDialogData}"/>
          <!-- this property will allow the dialog to show the correct
               starting permissions, and will be the value used when the
               dialog is submitted.
               Need to retrieve a PersonProjectMemberships from projectHome
               representing the correct person. -->
          <!-- use ui:define, access in template as <ui:insert name="definedName"/>-->
          <ui:define name="testDefine">
            <p>Then just some content goes in here</p>
          </ui:define>
        </ui:decorate>

      </div>

      <h2 class="panel__heading">#{msgs['jsf.People']}</h2>
    </div>

    <div class="panel__sub-header js-reveal">
      <div class="form--search panel__search reveal__target--appear" id="people-search">
        <label for="people-search__input" class="form--search__label"></label>
        <input id="people-search__input"
            type="search"
            placeholder="#{msgs['jsf.people.SearchPlaceholder']}"
            class="form--search__input js-reveal__target__input"/>
        <button class="button--link panel__search__cancel js-reveal__cancel"
            data-target="#people-search">#{msgs['jsf.Cancel']}</button>
      </div>
      <div class="panel__results">
        <div class="panel__results__type">
          <i class="i i--language txt--neutral"></i>
        </div>
        <span class="txt--meta"><strong>3</strong> of 3</span>
        <button class="button--link panel__search__reset js-reveal__reset is-hidden"
            title="#{msgs['jsf.ClearSearch']}"
            data-target="#people-search">
          <i class="i--right i--cancel"></i>
        </button>
        <button class="button--link panel__search__button js-reveal__show"
            data-target="#people-search">#{msgs['jsf.Search']}<i class="i--right i--search"></i>
        </button>
      </div>
    </div>
    <ul class="list--slat l--push-all-half">
      <ui:repeat value="#{projectHome.allMembers}" var="person">

        <li>
          <div class="g g--tighter">
            <div class="g__item w--4-12">
              <zanata:person-tile person="#{person}"/>
            </div>
            <div class="g__item w--4-12">
              <ui:repeat value="#{projectHome.memberRoles.get(person).toArray()}" var="role">
                <div class="txt--understated">#{projectHome.projectRoleDisplayName(role)}</div>
              </ui:repeat>
            </div>
            <div class="g__item w--4-12 txt--align-right">
              <s:fragment
                  rendered="#{s:hasPermission(projectHome.instance, 'manage-members')
                           or s:hasPermission(projectHome.instance, 'manage-translation-members')}">
                <!-- TODO does this need its own dialog, or can it reuse the other?
                  Differences:
                    - different title
                    - hard-coded person
                    - different submit button text
                    - different button state+text when nothing selected

                  Similarities:
                    - single person selected (may change later)
                    - available permissions identical
                    - display current permissions when user selected
                    - permission check for each section is the same
                -->
                <!-- TODO onclick -> set person for permission dialog -->
                  <h:form id="permission-dialog-setup-form">
                      <a4j:commandButton
                              value="#{msgs['jsf.projectPermissions.ManagePermissions']}"
                              onbegin="/* TODO set modal to loading state */"
                              action="#{projectHome.setPersonForPermissionDialog(person)}"
                              render="modal-manage-permissions"
                              oncomplete="/* TODO show the modal */"
                              />
                  </h:form>

                <button class="button button--small"
                        data-toggle="modal"
                        data-target="#modal-manage-permissions-content">
                  <i class="i i--settings"></i>
                  #{msgs['jsf.projectPermissions.ManagePermissions']} SHOW MODAL
                </button>
              </s:fragment>
            </div>
          </div>
        </li>
      </ui:repeat>
    </ul>

    <s:div id="modal-manage-permissions">
      <ui:decorate template="person-permissions-modal.xhtml">
        <ui:param name="id" value="modal-manage-permissions-content"/>
        <ui:param name="title" value="#{msgs['jsf.projectPermissions.ManagePermissions']}"/>

        <ui:param name="memberships" value="#{projectHome.permissionDialogData}"/>
        <!-- this property will allow the dialog to show the correct
             starting permissions, and will be the value used when the
             dialog is submitted.
             Need to retrieve a PersonProjectMemberships from projectHome
             representing the correct person. -->
        <!-- use ui:define, access in template as <ui:insert name="definedName"/>-->
        <ui:define name="testDefine">
          <p>Then just some content goes in here</p>
        </ui:define>
      </ui:decorate>
    </s:div>

  </div>

</ui:composition>
